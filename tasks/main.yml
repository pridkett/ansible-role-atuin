---
- name: Install Atuin on macOS
  block:
    - name: Install Atuin using Homebrew
      community.general.homebrew:
        name: atuin
        state: present
  when: ansible_os_family == "Darwin"

- name: Register version of curently installed copy of atuin
  block:
    - name: Execute atuin to get its version
      command: atuin --version
      register: atuin_version_output
      ignore_errors: yes
      failed_when: false

    - name: Set atuin_installed_version variable
      set_fact:
        atuin_installed_version: "{{ atuin_version_output.stdout | default('') }}"
      when: atuin_version_output.rc == 0

    - name: Set atuin_installed_version variable as empty when command fails
      set_fact:
        atuin_installed_version: ""
      when: atuin_version_output.rc != 0

    - name: Set need_download based on atuin_installed_version
      set_fact:
        need_download: "{{ ('atuin ' + atuin_version) not in atuin_installed_version }}"

    - name: Debug atuin_installed_version
      debug:
        msg: "atuin_installed_version is '{{ atuin_installed_version }}'."

    - name: Debug need_download
      debug:
        msg: "need_download is '{{ need_download }}'."
  when: ansible_os_family != 'Darwin'
        
- name: Install Atuin on Linux x86/x86_64
  block:
    - name: Ensure cargo is installed
      apt:
        name: ['cargo']
        state: present
        update_cache: true
      become: yes
      tags: install

    - name: Install atuin using cargo
      ansible.builtin.command:
        argv: ["cargo", "install", "atuin", "--version", "{{ atuin_version }}"]
      tags: install
  
    - name: copy atuin binary to /usr/local/bin/atuin
      ansible.builtin.command:
        argv: ["cp", "{{ ansible_env.HOME }}/.cargo/bin/atuin", "/usr/local/bin/atuin"]
      tags: install
      become: yes

    - name: Set the permissions on the copied file
      ansible.builtin.file:
        path: /usr/local/bin/atuin
        owner: root
        group: root
        mode: '0755'
      become: yes

  when: ansible_os_family in ["Linux", "Debian"] and ansible_architecture in ["x86_64", "x86"] and ansible_pkg_mgr == "apt" and need_download
  
- name: Install Atuin on Raspberry Pi
  block:
    - name: Check if /usr/local/bin/atuin exists
      stat:
        path: /usr/local/bin/atuin
      register: atuin_file

    - name: Get atuin version if file exists
      command: atuin --version
      register: atuin_current_version
      when: atuin_file.stat.exists
      ignore_errors: true

    - name: Set need_download based on atuin version and existence
      set_fact:
        need_download: "{{ not atuin_file.stat.exists or ('atuin ' + atuin_version) not in atuin_current_version.stdout }}"
      when: atuin_file.stat.exists
      
    - name: Set need_download to true if /usr/local/bin/atuin does not exist
      set_fact:
        need_download: true
      when: not atuin_file.stat.exists

    - name: Conditionally download atuin binary
      block:
        - name: Fetch atuin versions info
          uri:
            url: "https://patrick.wagstrom.net/misc/atuin_versions.json"
            return_content: yes
            method: GET
          register: atuin_versions_info
      
        - name: Parse and set the file name to download
          set_fact:
            atuin_binary_filename: "{{ (atuin_versions_info.json[ansible_architecture].versions[atuin_version]) }}"

        - name: Output the file to download
          debug:
            msg: "The file to download is {{ atuin_binary_filename }}"

        - name: Download and install atuin binary to /usr/local/bin/atuin
          get_url:
            url: "https://patrick.wagstrom.net/misc/{{ atuin_binary_filename }}"
            dest: "/usr/local/bin/atuin"
            mode: '0755'
          become: true
      when: need_download | bool
        

  when: ansible_architecture == "armv7l" or ansible_architecture == "aarch64"

- name: Install support for fish shell
  block:
    - name: Ensure the fish.d directory exists
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.config/fish/fish.d"
        state: directory
        mode: '0755'  # Optional: Set the permissions of the directory

    - name: Install Atuin fish scripts
      block:
        - name: install templated atuin.fish
          ansible.builtin.template:
            src: templates/atuin.fish.j2
            dest: "{{ ansible_env.HOME }}/.config/fish/fish.d/atuin.fish"

    - name: Fix atuin hostname
      ansible.builtin.template:
        src: templates/atuin_hostname.fish.j2
        dest: "{{ ansible_env.HOME }}/.config/fish/fish.d/atuin_hostname.fish"
      when: atuin_hostname_fix | bool
      
  when: atuin_fish_install | bool

- name: Invoke atuin to ensure there is a configuration file
  ansible.builtin.shell:
    cmd: atuin default-config

- name: Ensure sync_address is correctly set in atuin/config.toml
  ansible.builtin.lineinfile:
    path: "{{ ansible_env.HOME }}/.config/atuin/config.toml"
    regexp: '^#?\s*sync_address\s*='
    line: "sync_address = \"{{ atuin_sync_address }}\""
    backrefs: yes
    state: present
  when: atuin_sync_address is defined and atuin_sync_address | length > 0

- name: Double ensure sync_address is correctly set in atuin/config.toml
  ansible.builtin.lineinfile:
    path: "{{ ansible_env.HOME }}/.config/atuin/config.toml"
    line: "sync_address = \"{{ atuin_sync_address }}\""
    state: present
  when: atuin_sync_address is defined and atuin_sync_address | length > 0

# - name: Display Atuin Sync Login
#   ansible.builtin.debug:
#     msg: "Atuin Sync Login: {{ atuin_sync_login | default('Undefined') }}"

# - name: Display Atuin Sync Username
#   ansible.builtin.debug:
#     msg: "Atuin Sync Username: {{ atuin_sync_username | default('Undefined') }}"
    
# - name: Display Atuin Sync Password
#   ansible.builtin.debug:
#     msg: "Atuin Sync Password: {{ atuin_sync_password_int | default('Undefined') }}"

# - name: Display Atuin Sync Address
#   ansible.builtin.debug:
#     msg: "Atuin Sync Address: {{ atuin_sync_address | default('Undefined') }}"

# - name: Display Atuin Sync Address
#   ansible.builtin.debug:
#     msg: "Atuin.Sync_Address: {{ atuin.sync_address | default('Undefined') }}"

# - name: Display atuin_sync_int
#   ansible.builtin.debug:
#     msg: "atuin_sync_key_int: {{ atuin_sync_key_int | default('Undefined') }}"

# - name: Display atuin_sync_key
#   ansible.builtin.debug:
#     msg: "atuin_sync_key: {{ atuin_sync_key | default('Undefined') }}"

# - name: Display atuin.sync_key
#   ansible.builtin.debug:
#     msg: "atuin.sync_key: {{ atuin.sync_key | default('Undefined') }}"
        
- name: Set up synchornization
  ansible.builtin.command:
    argv:
      - "atuin"
      - "login"
      - "-u"
      - "{{ atuin_sync_username }}"
      - "-p"
      - "{{ atuin_sync_password_int }}"
      - "-k"
      - "{{ atuin_sync_key_int }}"
  when: atuin_sync_login | bool and atuin_sync_username | length > 0 and atuin_sync_password_int | length > 0 and atuin_sync_key_int | length > 0
  
- name: Install and Build Atuin Server on ARMv7l
  when: atuin_server_install | bool and ansible_architecture == "armv7l"
  block:
    - name: Clone atuin-server-docker repository
      ansible.builtin.git:
        repo: 'https://github.com/pridkett/atuin-server-docker.git'
        dest: "{{ atuin_server_dir }}"
        clone: yes
        update: yes

    - name: Copy server.toml.j2 to Atuin server config directory
      ansible.builtin.template:
        src: templates/server.toml.j2
        dest: "{{ atuin_server_dir }}/config/server.toml"

    - name: Copy dotenv.j2 to Atuin server directory as .env
      ansible.builtin.template:
        src: templates/dotenv.j2
        dest: "{{ atuin_server_dir}}/.env"
        
    - name: Run docker-compose build in Atuin server directory
      ansible.builtin.shell:
        cmd: docker-compose build
        chdir: "{{ atuin_server_dir }}"
      when: atuin_server_build | bool

    - name: Start docker-compose stack
      ansible.builtin.shell:
        cmd: docker-compose up -d
        chdir: "{{ atuin_server_dir }}"
      when: atuin_server_start | bool
